// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VehicleRegistration Vehicle registration Object
// swagger:model VehicleRegistration
type VehicleRegistration struct {

	// address
	// Required: true
	Address *Address `json:"address"`

	// color
	// Required: true
	Color *string `json:"color"`

	// created by
	CreatedBy *UserAccountRef `json:"createdBy,omitempty"`

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// decal
	Decal string `json:"decal,omitempty"`

	// effective date
	// Required: true
	// Format: date-time
	EffectiveDate *strfmt.DateTime `json:"effectiveDate"`

	// expiration date
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// issuing state
	// Required: true
	IssuingState *string `json:"issuingState"`

	// plate
	// Required: true
	Plate *string `json:"plate"`

	// registered owner
	// Required: true
	RegisteredOwner *Name `json:"registeredOwner"`

	// status
	Status string `json:"status,omitempty"`

	// updated by
	UpdatedBy *UserAccountRef `json:"updatedBy,omitempty"`

	// updated time
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty"`

	// vin
	// Required: true
	Vin *string `json:"vin"`
}

// Validate validates this vehicle registration
func (m *VehicleRegistration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuingState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VehicleRegistration) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *VehicleRegistration) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("color", "body", m.Color); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *VehicleRegistration) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateEffectiveDate(formats strfmt.Registry) error {

	if err := validate.Required("effectiveDate", "body", m.EffectiveDate); err != nil {
		return err
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateExpirationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateIssuingState(formats strfmt.Registry) error {

	if err := validate.Required("issuingState", "body", m.IssuingState); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validatePlate(formats strfmt.Registry) error {

	if err := validate.Required("plate", "body", m.Plate); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateRegisteredOwner(formats strfmt.Registry) error {

	if err := validate.Required("registeredOwner", "body", m.RegisteredOwner); err != nil {
		return err
	}

	if m.RegisteredOwner != nil {
		if err := m.RegisteredOwner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredOwner")
			}
			return err
		}
	}

	return nil
}

func (m *VehicleRegistration) validateUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *VehicleRegistration) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VehicleRegistration) validateVin(formats strfmt.Registry) error {

	if err := validate.Required("vin", "body", m.Vin); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VehicleRegistration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VehicleRegistration) UnmarshalBinary(b []byte) error {
	var res VehicleRegistration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
