// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Insurance Insurance Object
// swagger:model Insurance
type Insurance struct {

	// additional ID
	AdditionalID string `json:"additionalID,omitempty"`

	// covered vehicles
	// Required: true
	CoveredVehicles []*Vehicle `json:"coveredVehicles"`

	// created by
	CreatedBy *UserAccountRef `json:"createdBy,omitempty"`

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// effective date
	// Required: true
	// Format: date-time
	EffectiveDate *strfmt.DateTime `json:"effectiveDate"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// id card photo
	// Required: true
	IDCardPhoto *Picture `json:"idCardPhoto"`

	// insured name
	// Required: true
	InsuredName []*Name `json:"insuredName"`

	// insurer address
	InsurerAddress *Address `json:"insurerAddress,omitempty"`

	// insurer name
	// Required: true
	InsurerName *string `json:"insurerName"`

	// policy number
	// Required: true
	PolicyNumber *string `json:"policyNumber"`

	// policy type
	// Enum: [PERSONAL COMMERCIAL GAP UNKNOWN]
	PolicyType string `json:"policyType,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated by
	UpdatedBy *UserAccountRef `json:"updatedBy,omitempty"`

	// updated time
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty"`

	// vin
	// Required: true
	Vin *string `json:"vin"`
}

// Validate validates this insurance
func (m *Insurance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCoveredVehicles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDCardPhoto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsuredName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsurerAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsurerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Insurance) validateCoveredVehicles(formats strfmt.Registry) error {

	if err := validate.Required("coveredVehicles", "body", m.CoveredVehicles); err != nil {
		return err
	}

	for i := 0; i < len(m.CoveredVehicles); i++ {
		if swag.IsZero(m.CoveredVehicles[i]) { // not required
			continue
		}

		if m.CoveredVehicles[i] != nil {
			if err := m.CoveredVehicles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("coveredVehicles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Insurance) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *Insurance) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validateEffectiveDate(formats strfmt.Registry) error {

	if err := validate.Required("effectiveDate", "body", m.EffectiveDate); err != nil {
		return err
	}

	if err := validate.FormatOf("effectiveDate", "body", "date-time", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validateIDCardPhoto(formats strfmt.Registry) error {

	if err := validate.Required("idCardPhoto", "body", m.IDCardPhoto); err != nil {
		return err
	}

	if m.IDCardPhoto != nil {
		if err := m.IDCardPhoto.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("idCardPhoto")
			}
			return err
		}
	}

	return nil
}

func (m *Insurance) validateInsuredName(formats strfmt.Registry) error {

	if err := validate.Required("insuredName", "body", m.InsuredName); err != nil {
		return err
	}

	for i := 0; i < len(m.InsuredName); i++ {
		if swag.IsZero(m.InsuredName[i]) { // not required
			continue
		}

		if m.InsuredName[i] != nil {
			if err := m.InsuredName[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insuredName" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Insurance) validateInsurerAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.InsurerAddress) { // not required
		return nil
	}

	if m.InsurerAddress != nil {
		if err := m.InsurerAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insurerAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Insurance) validateInsurerName(formats strfmt.Registry) error {

	if err := validate.Required("insurerName", "body", m.InsurerName); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validatePolicyNumber(formats strfmt.Registry) error {

	if err := validate.Required("policyNumber", "body", m.PolicyNumber); err != nil {
		return err
	}

	return nil
}

var insuranceTypePolicyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PERSONAL","COMMERCIAL","GAP","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		insuranceTypePolicyTypePropEnum = append(insuranceTypePolicyTypePropEnum, v)
	}
}

const (

	// InsurancePolicyTypePERSONAL captures enum value "PERSONAL"
	InsurancePolicyTypePERSONAL string = "PERSONAL"

	// InsurancePolicyTypeCOMMERCIAL captures enum value "COMMERCIAL"
	InsurancePolicyTypeCOMMERCIAL string = "COMMERCIAL"

	// InsurancePolicyTypeGAP captures enum value "GAP"
	InsurancePolicyTypeGAP string = "GAP"

	// InsurancePolicyTypeUNKNOWN captures enum value "UNKNOWN"
	InsurancePolicyTypeUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *Insurance) validatePolicyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, insuranceTypePolicyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Insurance) validatePolicyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PolicyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolicyTypeEnum("policyType", "body", m.PolicyType); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validateUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *Insurance) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Insurance) validateVin(formats strfmt.Registry) error {

	if err := validate.Required("vin", "body", m.Vin); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Insurance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Insurance) UnmarshalBinary(b []byte) error {
	var res Insurance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
