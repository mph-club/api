// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vehicle Vehicle Object
// swagger:model Vehicle
type Vehicle struct {

	// color
	Color string `json:"color,omitempty"`

	// created by
	CreatedBy *UserAccountRef `json:"createdBy,omitempty"`

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// day max
	DayMax int64 `json:"dayMax,omitempty"`

	// day min
	DayMin int64 `json:"dayMin,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// doors
	Doors string `json:"doors,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// make
	// Required: true
	Make *string `json:"make"`

	// model
	// Required: true
	Model *string `json:"model"`

	// photos
	Photos []*Picture `json:"photos"`

	// seats
	Seats string `json:"seats,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// trim
	Trim string `json:"trim,omitempty"`

	// updated by
	UpdatedBy *UserAccountRef `json:"updatedBy,omitempty"`

	// updated time
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty"`

	// vehicle registration
	VehicleRegistration *VehicleRegistration `json:"vehicleRegistration,omitempty"`

	// vehicle type
	VehicleType []string `json:"vehicleType"`

	// vin
	// Required: true
	Vin *string `json:"vin"`

	// year
	// Required: true
	Year *string `json:"year"`
}

// Validate validates this vehicle
func (m *Vehicle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhotos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehicleRegistration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vehicle) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *Vehicle) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Vehicle) validateMake(formats strfmt.Registry) error {

	if err := validate.Required("make", "body", m.Make); err != nil {
		return err
	}

	return nil
}

func (m *Vehicle) validateModel(formats strfmt.Registry) error {

	if err := validate.Required("model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

func (m *Vehicle) validatePhotos(formats strfmt.Registry) error {

	if swag.IsZero(m.Photos) { // not required
		return nil
	}

	for i := 0; i < len(m.Photos); i++ {
		if swag.IsZero(m.Photos[i]) { // not required
			continue
		}

		if m.Photos[i] != nil {
			if err := m.Photos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("photos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Vehicle) validateUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *Vehicle) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Vehicle) validateVehicleRegistration(formats strfmt.Registry) error {

	if swag.IsZero(m.VehicleRegistration) { // not required
		return nil
	}

	if m.VehicleRegistration != nil {
		if err := m.VehicleRegistration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vehicleRegistration")
			}
			return err
		}
	}

	return nil
}

func (m *Vehicle) validateVin(formats strfmt.Registry) error {

	if err := validate.Required("vin", "body", m.Vin); err != nil {
		return err
	}

	return nil
}

func (m *Vehicle) validateYear(formats strfmt.Registry) error {

	if err := validate.Required("year", "body", m.Year); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Vehicle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vehicle) UnmarshalBinary(b []byte) error {
	var res Vehicle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
