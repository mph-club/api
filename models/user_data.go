// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserData User Data Object
// swagger:model UserData
type UserData struct {

	// address
	Address *Address `json:"address,omitempty"`

	// created by
	CreatedBy *UserAccountRef `json:"createdBy,omitempty"`

	// created time
	// Format: date-time
	CreatedTime strfmt.DateTime `json:"createdTime,omitempty"`

	// driver license
	DriverLicense *DriverLicense `json:"driverLicense,omitempty"`

	// expired
	Expired bool `json:"expired,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// insurances
	Insurances []*Insurance `json:"insurances"`

	// name
	Name *Name `json:"name,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// updated by
	UpdatedBy *UserAccountRef `json:"updatedBy,omitempty"`

	// updated time
	// Format: date-time
	UpdatedTime strfmt.DateTime `json:"updatedTime,omitempty"`

	// user account
	// Required: true
	UserAccount *UserAccount `json:"userAccount"`

	// validated
	Validated bool `json:"validated,omitempty"`

	// vehicles owned
	VehiclesOwned []*Vehicle `json:"vehiclesOwned"`

	// vehicles rented
	VehiclesRented []*Vehicle `json:"vehiclesRented"`
}

// Validate validates this user data
func (m *UserData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDriverLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsurances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehiclesOwned(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVehiclesRented(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserData) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateCreatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateCreatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserData) validateDriverLicense(formats strfmt.Registry) error {

	if swag.IsZero(m.DriverLicense) { // not required
		return nil
	}

	if m.DriverLicense != nil {
		if err := m.DriverLicense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("driverLicense")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateInsurances(formats strfmt.Registry) error {

	if swag.IsZero(m.Insurances) { // not required
		return nil
	}

	for i := 0; i < len(m.Insurances); i++ {
		if swag.IsZero(m.Insurances[i]) { // not required
			continue
		}

		if m.Insurances[i] != nil {
			if err := m.Insurances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("insurances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserData) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if m.Name != nil {
		if err := m.Name.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("name")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateUpdatedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateUpdatedTime(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedTime", "body", "date-time", m.UpdatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserData) validateUserAccount(formats strfmt.Registry) error {

	if err := validate.Required("userAccount", "body", m.UserAccount); err != nil {
		return err
	}

	if m.UserAccount != nil {
		if err := m.UserAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userAccount")
			}
			return err
		}
	}

	return nil
}

func (m *UserData) validateVehiclesOwned(formats strfmt.Registry) error {

	if swag.IsZero(m.VehiclesOwned) { // not required
		return nil
	}

	for i := 0; i < len(m.VehiclesOwned); i++ {
		if swag.IsZero(m.VehiclesOwned[i]) { // not required
			continue
		}

		if m.VehiclesOwned[i] != nil {
			if err := m.VehiclesOwned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vehiclesOwned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserData) validateVehiclesRented(formats strfmt.Registry) error {

	if swag.IsZero(m.VehiclesRented) { // not required
		return nil
	}

	for i := 0; i < len(m.VehiclesRented); i++ {
		if swag.IsZero(m.VehiclesRented[i]) { // not required
			continue
		}

		if m.VehiclesRented[i] != nil {
			if err := m.VehiclesRented[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vehiclesRented" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserData) UnmarshalBinary(b []byte) error {
	var res UserData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
