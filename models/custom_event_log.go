// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomEventLog custom event log
// swagger:model CustomEventLog
type CustomEventLog struct {

	// event content
	// Required: true
	EventContent interface{} `json:"eventContent"`

	// The unique ID of the event. If empty/null a UUID will be auto-generated. If an event with the same ID is already present this is treated as an update
	EventID string `json:"eventId,omitempty"`

	// The time of the event
	EventTime string `json:"eventTime,omitempty"`

	// The type of event, for example 'OutboundMessage'
	// Required: true
	EventType *string `json:"eventType"`

	// The version of the JSON used to talk to the MPH service
	MphServiceVersion string `json:"mphServiceVersion,omitempty"`

	// The ID of the time zone for the data source (where the message was created)
	TimeZoneID string `json:"timeZoneId,omitempty"`
}

// Validate validates this custom event log
func (m *CustomEventLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomEventLog) validateEventContent(formats strfmt.Registry) error {

	if err := validate.Required("eventContent", "body", m.EventContent); err != nil {
		return err
	}

	return nil
}

func (m *CustomEventLog) validateEventType(formats strfmt.Registry) error {

	if err := validate.Required("eventType", "body", m.EventType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomEventLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomEventLog) UnmarshalBinary(b []byte) error {
	var res CustomEventLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
