// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetPasswordRequest set password request
// swagger:model SetPasswordRequest
type SetPasswordRequest struct {

	// new password
	// Format: password
	NewPassword strfmt.Password `json:"newPassword,omitempty"`

	// temp password
	// Format: password
	TempPassword strfmt.Password `json:"tempPassword,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this set password request
func (m *SetPasswordRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTempPassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetPasswordRequest) validateNewPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.NewPassword) { // not required
		return nil
	}

	if err := validate.FormatOf("newPassword", "body", "password", m.NewPassword.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SetPasswordRequest) validateTempPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.TempPassword) { // not required
		return nil
	}

	if err := validate.FormatOf("tempPassword", "body", "password", m.TempPassword.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetPasswordRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetPasswordRequest) UnmarshalBinary(b []byte) error {
	var res SetPasswordRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
