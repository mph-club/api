swagger: '2.0'
info:
  description: This is the MPH API definition
  version: 1.0.0
  title: MPH Club
basePath: /v1
tags:
  - name: UserAccount
    description: 'UserAccount endpoints. Create, Update, get etc...'
  - name: Vehicle
    description: 'Vehicle API. Create, get, etc.'
  - name: Booking
    description: 'Booking API. Create, update, cancel, etc.'
schemes:
  - http
responses:
  '400':
    description: Validation failed.
    schema:
      $ref: '#/definitions/ApiError'
  '401':
    description: >-
      User is not authenticated or does not have permission to perform this
      action.
    schema:
      $ref: '#/definitions/ApiError'
  '404':
    description: Resource not found.
    schema:
      $ref: '#/definitions/ApiError'
  default:
    description: unexpected error
    schema:
      $ref: '#/definitions/ApiError'
paths:
  /vehicle:
    post:
      tags:
        - Vehicle
      summary: Add a vehicle
      operationId: addVehicle
      consumes:
        - application/json
      parameters:
        - name: vehicle
          in: body
          description: Vehicle to add
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: Successful response
  '/vehicle/{id}':
    get:
      tags:
        - Vehicle
      summary: Retrieve a vehicle by id
      operationId: getVehicle
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The Vehicle id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Vehicle'
    put:
      tags:
        - Vehicle
      summary: update a specific vehicle
      operationId: updateVehicle
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The Vehicle id
          required: true
          type: string
        - name: vehicle
          in: body
          description: Vehicle to update
          required: true
          schema:
            $ref: '#/definitions/Vehicle'
      responses:
        '200':
          description: Successful response
    delete:
      tags:
        - Vehicle
      summary: delist vehicle
      operationId: deleteVehicle
      parameters:
        - name: id
          in: path
          description: The vehicle id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  '/vehicle/getAll/{radius}/{longitude}/{latitude}':
    get:
      tags:
        - Vehicle
      summary: Retrieve a list of vehicles within radius
      operationId: getAllVehiclesByDistance
      consumes:
        - application/json
      parameters:
        - name: radius
          in: path
          description: The radius to search
          required: true
          type: string
        - name: longitude
          in: path
          description: The Longitude of the Vehicle
          required: true
          type: string
        - name: latitude
          in: path
          description: The latitude of the Vehicle
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              type: string
  '/vehicle/getVehicleList/{type}/{pageLength}':
    get:
      tags:
        - Vehicle
      summary: Gets a list of vehicles based on type and length of page
      operationId: getVehicleList
      consumes:
        - application/json
      parameters:
        - name: type
          in: path
          description: car type to search on
          required: true
          type: string
        - name: pageLength
          in: path
          description: length of list to return
          required: true
          type: integer
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
  /vehicle/getList/{radius}:
    get:
      tags:
        - Vehicle
      summary: Retrieve a list of vehicles within radius
      operationId: getListVehiclesByIds
      consumes:
        - application/json
      parameters:
        - name: radius
          in: path
          description: The radius to search
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            type: array
            items:
              $ref: '#/definitions/Vehicle'
  /booking/submit:
    post:
      tags:
        - Booking
      summary: Submit a booking request
      operationId: submitBooking
      consumes:
        - application/json
      parameters:
        - name: booking
          in: body
          description: booking to submit
          required: true
          schema:
            $ref: '#/definitions/Booking'
      responses:
        '200':
          description: Successful response
  '/booking/{id}':
    get:
      tags:
        - Booking
      summary: Get a booking by Id
      operationId: getBooking
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The Booking id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /userdata:
    post:
      tags:
        - UserData
      summary: Create user data
      operationId: createUserData
      consumes:
        - application/json
      parameters:
        - name: userData
          in: body
          description: UserData to add
          required: true
          schema:
            $ref: '#/definitions/UserData'
      responses:
        '200':
          description: Successful response
  '/user/{id}':
    get:
      tags:
        - UserData
      summary: Get the user data of a specific user account
      operationId: getUserData
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The internal app userId
          required: true
          type: string
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/UserData'
    put:
      tags:
        - UserData
      summary: update User Data
      operationId: updateUserData
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The User id
          required: true
          type: string
        - name: userData
          in: body
          description: User to update
          required: true
          schema:
            $ref: '#/definitions/UserData'
      responses:
        '200':
          description: Successful response
    delete:
      tags:
        - UserData
      summary: deactivate a user and all items associated
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The Users id
          required: true
          type: string
      responses:
        '200':
          description: Successful response
  /useraccount/findbyusername:
    get:
      tags:
        - UserAccount
      summary: Find a user account specified by person user name
      description: Returns a userAccount matching the value parameter
      operationId: findByUserName
      produces:
        - application/json
      parameters:
        - name: userName
          in: query
          description: User name
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/UserData'
        '401':
          description: >-
            User is not authenticated or does not have permission to perform
            this action.
          schema:
            $ref: '#/definitions/ApiError'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiError'
  /email/send:
    post:
      summary: '[Internal Operation Only] Send an email to a recipient.'
      operationId: adminSendEmail
      tags:
        - email
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: EmailSendRequest
          description: The email send request
          required: true
          schema:
            $ref: '#/definitions/EmailSendRequest'
      responses:
        '200':
          description: The email send response
        '400':
          description: >-
            The EmailSendRequest failed validation or did not satisfy the email
            sending requirements
          schema:
            $ref: '#/definitions/ApiError'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiError'
  /email/sendtemplated:
    post:
      summary: >-
        [Internal Operation Only] Send an email to a recipient. The email is
        templated, so a template name must be used.
      operationId: adminSendTemplatedEmail
      tags:
        - email
        - Admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: TemplatedEmailSendRequest
          description: The email send request
          required: true
          schema:
            $ref: '#/definitions/TemplatedEmailSendRequest'
      responses:
        '200':
          description: The email send response
        '400':
          description: >-
            The TemplatedEmailSendRequest failed validation or did not satisfy
            the email sending requirements
          schema:
            $ref: '#/definitions/ApiError'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ApiError'
definitions:
  ApiError:
    type: object
    properties:
      txID:
        type: string
      errors:
        type: array
        items:
          $ref: '#/definitions/ApiErrorDetail'
  ApiErrorDetail:
    type: object
    properties:
      errorCode:
        type: string
      endUserMessage:
        type: string
      errorProperties:
        type: object
  Address:
    type: object
    description: Address Object
    required:
      - city
    properties:
      id:
        type: string
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      state:
        type: string
      province:
        type: string
      postalCode:
        type: string
      country:
        type: string
      longitude:
        type: string
      latitude:
        type: string
      placeName:
        type: string
      fullAddress:
        type: string
      addressType:
        type: string
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  DriverLicense:
    type: object
    description: Driver License Object
    required:
      - city
    properties:
      id:
        type: string
      address:
        $ref: '#/definitions/Address'
      name:
        type: string
      city:
        type: string
      issueDate:
        type: string
        format: date-time
      expirationDate:
        type: string
        format: date-time
      dob:
        type: string
        format: date-time
      status:
        type: string
      state:
        type: string
      gender:
        type: string
      dlNumber:
        type: string
      photoFront:
        $ref: '#/definitions/Picture'
      photoBack:
        $ref: '#/definitions/Picture'
      photoWithUser:
        $ref: '#/definitions/Picture'
      dlType:
        type: string
      endorsement:
        type: string
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  VehicleRegistration:
    type: object
    description: Vehicle registration Object
    required:
      - plate
      - vin
      - color
      - address
      - registeredOwner
      - issuingState
      - effectiveDate
    properties:
      id:
        type: string
      plate:
        type: string
      decal:
        type: string
      status:
        type: string
      vin:
        type: string
      color:
        type: string
      address:
        $ref: '#/definitions/Address'
      registeredOwner:
        $ref: '#/definitions/UserAccountRef'
      issuingState:
        type: string
      effectiveDate:
        type: string
        format: date-time
      expirationDate:
        type: string
        format: date-time
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  Vehicle:
    type: object
    description: Vehicle Object
    required:
      - make
      - vin
      - model
      - year
    properties:
      id:
        type: string
      make:
        type: string
      model:
        type: string
      year:
        type: string
      trim:
        type: string
      color:
        type: string
      doors:
        type: string
      seats:
        type: string
      vin:
        type: string
      description:
        type: string
      dayMin:
        type: integer
      dayMax:
        type: integer
      vehicleType:
        type: string
      photos:
        type: array
        items:
          $ref: '#/definitions/Picture'
      vehicleRegistration:
        $ref: '#/definitions/VehicleRegistration'
      status:
        type: string
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  Insurance:
    type: object
    description: Insurance Object
    required:
      - insurerName
      - insuredName
      - coveredVehicles
      - policyNumber
      - effectiveDate
      - vin
      - idCardPhoto
    properties:
      id:
        type: string
      insurerName:
        type: string
      insurerAddress:
        $ref: '#/definitions/Address'
      insuredName:
        type: array
        items:
          $ref: '#/definitions/UserAccountRef'
      coveredVehicles:
        type: array
        items:
          $ref: '#/definitions/Vehicle'
      status:
        type: string
      policyType:
        type: string
        enum:
          - PERSONAL
          - COMMERCIAL
          - GAP
          - UNKNOWN
      policyNumber:
        type: string
      additionalID:
        type: string
      effectiveDate:
        type: string
        format: date-time
      endDate:
        type: string
        format: date-time
      vin:
        type: string
      idCardPhoto:
        $ref: '#/definitions/Picture'
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  UserData:
    type: object
    description: User Data Object
    required:
      - userAccount
    properties:
      userAccount:
        $ref: '#/definitions/UserAccountRef'
      address:
        $ref: '#/definitions/Address'
      driverLicense:
        $ref: '#/definitions/DriverLicense'
      insurances:
        type: array
        items:
          $ref: '#/definitions/Insurance'
      vehiclesOwned:
        type: array
        items:
          $ref: '#/definitions/Vehicle'
      vehiclesRented:
        type: array
        items:
          $ref: '#/definitions/Vehicle'
      expired:
        type: boolean
      validated:
        type: boolean
      status:
        type: string
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
  UserAccountRef:
    type: object
    properties:
      sub:
        type: string
      email:
        type: string
  EmailSendRequest:
    type: object
    properties:
      toEmailAddress:
        type: string
      fromEmailAddress:
        type: string
      subject:
        type: string
      body:
        type: string
  TemplatedEmailSendRequest:
    type: object
    properties:
      emailAddress:
        type: string
      languageLocale:
        type: string
      templateId:
        type: string
        description: The templateId identifies which template
      fields:
        type: object
        description: >-
          Provide a key<string>-value<string> map of elements to distill into
          the email template
  Booking:
    type: object
    description: Booking Object containing details of a registered booking
    properties:
      id:
        type: string
      confirmationNumber:
        type: string
      vehicle:
        $ref: '#/definitions/Vehicle'
  Picture:
    type: object
    properties:
      id:
        type: string
      photoURL:
        type: string
      createdBy:
        $ref: '#/definitions/UserAccountRef'
      createdTime:
        type: string
        format: date-time
      updatedBy:
        $ref: '#/definitions/UserAccountRef'
      updatedTime:
        type: string
        format: date-time
